plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version + '+' + project.minecraft_version
group = 'dev.enderpalm'
archivesBaseName = 'lignin'

repositories {
    maven { url = 'https://maven.parchmentmc.org' }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    maven {
        url "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }
    mavenCentral()
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Dev dependencies
    modRuntimeOnly "me.djtheredstoner:DevAuth-fabric:${project.devauth_version}"
    modLocalRuntime "maven.modrinth:lazydfu:${project.lazydfu_version}"
    modApi("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude group: "net.fabricmc", module: "fabric-loader"
    }
    testmodImplementation sourceSets.main.output
}

loom {
    accessWidenerPath = file("src/main/resources/lignin.accesswidener")
    runs {
        mockClient {
            client()
            name = "Minecraft Client :Testmod"
            source sourceSets.testmod
        }

        mockServer {
            server()
            name = "Minecraft Server :Testmod"
            source sourceSets.testmod
        }
    }
    runConfigs.configureEach {
        ideConfigGenerated true
        property "mixin.hotswap", "true"
        property "mixin.debug.export", "true"
    }

    mixin {
        defaultRefmapName = 'lignin.refmap.json'
    }
}

afterEvaluate {
    loom {
        runs {
            configureEach {
                // Add mixin agent to all run configs for hotswapping
                def mixinJarFile = configurations.compileClasspath.files { it.group == "net.fabricmc" && it.name == "sponge-mixin" }.first()
                vmArg("-javaagent:$mixinJarFile")
            }
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc).configureEach {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
    withJavadocJar()
}

jar {
    from "LICENSE.md"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/enderpalm/Lignin"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}